\begin{code}
{-# OPTIONS --without-K --exact-split --safe --auto-inline --experimental-lossy-unification #-}

open import MLTT.Spartan
open import UF.FunExt
open import UF.PropTrunc
open import UF.Subsingletons

module DomainTheory.Bilimits.plus2
        (pt : propositional-truncations-exist)
        (fe : Fun-Ext)
        (pe : Prop-Ext)
       where

open PropositionalTruncation pt

open import DomainTheory.Basics.Exponential pt fe ùì§‚ÇÄ
open import DomainTheory.Basics.Pointed pt fe ùì§‚ÇÄ
open import DomainTheory.Lifting.LiftingSet pt fe ùì§‚ÇÄ pe
open import DomainTheory.Lifting.LiftingDcpo pt fe ùì§‚ÇÄ pe
open import DomainTheory.Basics.Miscelanea pt fe ùì§‚ÇÄ
open import Lifting.Lifting ùì§‚ÇÄ hiding (‚ä•)

open import Naturals.Order

{- open import Naturals.Order hiding (subtraction')
open import Naturals.Addition renaming (_+_ to _+'_)
open import Notation.Order -}

open import UF.Base
open import UF.UniverseEmbedding

open import DomainTheory.Basics.Dcpo pt fe ùì§‚ÇÄ

module _ (ùìì : DCPO {ùì§} {ùì£}) (ùìî : DCPO {ùì§'} {ùì£'}) where
  D+E = ‚ü® ùìì ‚ü© + ‚ü® ùìî ‚ü©

  _‚äë_ : D+E ‚Üí D+E ‚Üí ùì£ ‚äî ùì£' Ãá 
  inl d ‚äë inl d' = Lift ùì£' (d ‚äë‚ü® ùìì ‚ü© d') -- d ‚äë‚ü® ùìì ‚ü© d'
  inl d ‚äë inr e' = ùüò
  inr e ‚äë inl d' = ùüò
  inr e ‚äë inr e' = Lift ùì£ (e ‚äë‚ü® ùìî ‚ü© e')

  ‚äë-is-prop-valued : (s t : D+E) ‚Üí is-prop (s ‚äë t)
  ‚äë-is-prop-valued (inl d) (inl d') = Œ£-is-prop (prop-valuedness ùìì d d') (Œª _ ‚Üí ùüô-is-prop)
  ‚äë-is-prop-valued (inl d) (inr e') = ùüò-is-prop
  ‚äë-is-prop-valued (inr e) (inl d') = ùüò-is-prop
  ‚äë-is-prop-valued (inr e) (inr e') = Œ£-is-prop (prop-valuedness ùìî e e') (Œª _ ‚Üí ùüô-is-prop)

  ‚äë-is-reflexive : (s : D+E) ‚Üí s ‚äë s
  ‚äë-is-reflexive = dep-cases (Œª s ‚Üí lift ùì£' (reflexivity ùìì s)) (Œª s ‚Üí lift ùì£ (reflexivity ùìî s))

  ‚äë-is-transitive : (s t r : D+E) ‚Üí s ‚äë t ‚Üí t ‚äë r ‚Üí s ‚äë r
  ‚äë-is-transitive (inl s) (inl t) (inl r) p q = lift ùì£' (transitivity ùìì s t r (lower p) (lower q))
  ‚äë-is-transitive (inr s) (inr t) (inr r) p q = lift ùì£ (transitivity ùìî s t r (lower p) (lower q))

  ‚äë-is-antisymmetric : (s t : D+E) ‚Üí s ‚äë t ‚Üí t ‚äë s ‚Üí s Ôºù t
  ‚äë-is-antisymmetric (inl s) (inl t) p q = ap inl (antisymmetry ùìì s t (lower p) (lower q))
  ‚äë-is-antisymmetric (inr s) (inr t) p q = ap inr (antisymmetry ùìî s t (lower p) (lower q))




  -- Can't use is-continuous in the type annotation because we haven't
  -- constructed +-DCPO yet, but this type is definitionally equal to
  -- is-continuous ùìì +-DCPO inl
  inl-is-continuous : (I : ùì§‚ÇÄ Ãá ) (Œ± : I ‚Üí ‚ü® ùìì ‚ü©) (Œ¥ : is-Directed ùìì Œ±)
                         ‚Üí is-sup _‚äë_ (inl (‚àê ùìì Œ¥)) (inl ‚àò Œ±)
  inl-is-continuous I Œ± Œ¥ = (Œª i ‚Üí lift ùì£' (‚àê-is-upperbound ùìì Œ¥ i)) , dep-cases (Œª v x ‚Üí lift ùì£' (‚àê-is-lowerbound-of-upperbounds ùìì Œ¥ v (Œª i ‚Üí lower (x i)))) (Œª v x -> ‚à•‚à•-rec ùüò-is-prop x (pr‚ÇÅ Œ¥))


  inr-is-continuous : (I : ùì§‚ÇÄ Ãá ) (Œ± : I ‚Üí ‚ü® ùìî ‚ü©) (Œ¥ : is-Directed ùìî Œ±)
                         ‚Üí is-sup _‚äë_ (inr (‚àê ùìî Œ¥)) (inr ‚àò Œ±)
  inr-is-continuous I Œ± Œ¥ = (Œª i ‚Üí lift ùì£ (‚àê-is-upperbound ùìî Œ¥ i)) , dep-cases (Œª v x -> ‚à•‚à•-rec ùüò-is-prop x (pr‚ÇÅ Œ¥)) (Œª v x ‚Üí lift ùì£ (‚àê-is-lowerbound-of-upperbounds ùìî Œ¥ v (Œª i ‚Üí lower (x i))))



  +-DCPO : DCPO {ùì§ ‚äî ùì§'} {ùì£ ‚äî ùì£'}
  +-DCPO = (D+E , _‚äë_ , (+-is-set ‚ü® ùìì ‚ü© ‚ü® ùìî ‚ü© (sethood ùìì) (sethood ùìî)
                      , ‚äë-is-prop-valued
                      , ‚äë-is-reflexive
                      , ‚äë-is-transitive
                      , ‚äë-is-antisymmetric)
                , Œ≥)
    where
      
      Œ≥ : is-directed-complete _‚äë_ 
      Œ≥ I Œ± (inh , semi) = ‚à•‚à•-rec (having-sup-is-prop _‚äë_ (
        (+-is-set ‚ü® ùìì ‚ü© ‚ü® ùìî ‚ü© (sethood ùìì) (sethood ùìî)) ,
        ‚äë-is-prop-valued ,
        ‚äë-is-reflexive ,
        ‚äë-is-transitive ,
        ‚äë-is-antisymmetric) Œ±)
        (Œª i -> (dep-cases (leftcase i) (rightcase i) (split i))) inh
        where

          split : (i : I) -> (Œ£ x Íûâ ‚ü® ùìì ‚ü© , (Œ± i) Ôºù (inl x)) + (Œ£ y Íûâ ‚ü® ùìî ‚ü© , (Œ± i) Ôºù (inr y))
          split i = splits (Œ± i)
            where
              splits : (z : D+E) -> (Œ£ x Íûâ ‚ü® ùìì ‚ü© , z Ôºù (inl x)) + (Œ£ y Íûâ ‚ü® ùìî ‚ü© , z Ôºù (inr y))
              splits (inl x) = inl (x , refl)
              splits (inr y) = inr (y , refl)

          {-left-}
          ext-left : (i : I) -> ((y : ‚ü® ùìî ‚ü©) (i : I) -> ((Œ± i) Ôºù (inr y)) -> ùüò) -> (x : D+E) -> ((Œ± i) Ôºù x) -> ‚ü® ùìì ‚ü©
          ext-left i bad (inl x) p = x
          ext-left i bad (inr y) p = ùüò-elim (bad y i p)

          left : ((y : ‚ü® ùìî ‚ü©) (i : I) -> ((Œ± i) Ôºù (inr y)) -> ùüò) -> I -> ‚ü® ùìì ‚ü©
          left bad i = ext-left i bad (Œ± i) refl

          left-eq : (bad : (y : ‚ü® ùìî ‚ü©) (i : I) -> ((Œ± i) Ôºù (inr y)) -> ùüò) (i : I) -> (inl (left bad i) Ôºù (Œ± i))
          left-eq bad i = ext (Œ± i) refl
            where
              ext-left-eq : (x y : D+E) (p : x Ôºù y) (q : ((Œ± i) Ôºù x)) -> (ext-left i bad x q) Ôºù (ext-left i bad y (q ‚àô p))
              ext-left-eq x x refl q = refl
   
              ext : (x : D+E) -> ((Œ± i) Ôºù x) -> ((inl (left bad i)) Ôºù x)
              ext (inl x) p = ap inl (ext-left-eq (Œ± i) (inl x) p refl)
              ext (inr y) p = ùüò-elim (bad y i p)

          left-neq : (i1 : I) -> (Œ£ x Íûâ ‚ü® ùìì ‚ü© , (Œ± i1) Ôºù (inl x)) -> (y : ‚ü® ùìî ‚ü©) (j1 : I) -> ((Œ± j1) Ôºù (inr y)) -> ùüò
          left-neq i1 p y j1 q = ‚à•‚à•-rec ùüò-is-prop (left-neq2 p q) (semi i1 j1)
            where
              case1 : ((Œ± j1) Ôºù (inr y)) -> (k : I) -> (Œ± j1 ‚äë Œ± k) -> (Œ£ x Íûâ ‚ü® ùìì ‚ü© , (Œ± k) Ôºù (inl x)) -> ùüò
              case1 p k comp1 (x , q) = transport (_‚äë_ (inr y)) q (transport (Œª z ‚Üí z ‚äë (Œ± k)) p comp1)

              case2 : (Œ£ x Íûâ ‚ü® ùìì ‚ü© , (Œ± i1) Ôºù (inl x)) -> (k : I) -> (Œ± i1 ‚äë Œ± k) -> (Œ£ y Íûâ ‚ü® ùìî ‚ü© , (Œ± k) Ôºù (inr y)) -> ùüò
              case2 (x , p) k comp1 (y , q) = transport (_‚äë_ (inl x)) q (transport (Œª z ‚Üí z ‚äë (Œ± k)) p comp1)

              left-neq2 : (Œ£ x Íûâ ‚ü® ùìì ‚ü© , (Œ± i1) Ôºù (inl x)) -> ((Œ± j1) Ôºù (inr y)) -> Œ£ k Íûâ I , (Œ± i1 ‚äë Œ± k) √ó (Œ± j1 ‚äë Œ± k) -> ùüò
              left-neq2 p q (k , (comp1 , comp2)) = cases (case1 q k comp2) (case2 p k comp1) (split k)

          leftcase : (i1 : I) -> (Œ£ x Íûâ ‚ü® ùìì ‚ü© , (Œ± i1) Ôºù (inl x)) -> (has-sup _‚äë_ Œ±)
          leftcase i1 p = (inl (‚àê ùìì d) , transport (Œª z ‚Üí is-sup _‚äë_ (inl (‚àê ùìì d)) z) eq (inl-is-continuous I b d))
            where
              b : I -> ‚ü® ùìì ‚ü©
              b = left (left-neq i1 p)

              eq2 : (inl ‚àò b) ‚àº Œ±
              eq2 = (left-eq (left-neq i1 p))
              
              eq : (inl ‚àò b) Ôºù Œ±
              eq = (dfunext fe) eq2
              
              d : is-Directed ùìì b
              d = (‚à£_‚à£ i1 , Œª i j ‚Üí ‚à•‚à•-functor (Œª (k , (p1 , p2)) ‚Üí k , (lower (transport (Œª z ‚Üí inl (b i) ‚äë z) ((eq2 k)‚Åª¬π) (transport (Œª z ‚Üí z ‚äë (Œ± k)) ((eq2 i)‚Åª¬π) p1)) , lower (transport (Œª z ‚Üí inl (b j) ‚äë z) ((eq2 k)‚Åª¬π) (transport (Œª z ‚Üí z ‚äë (Œ± k)) ((eq2 j)‚Åª¬π) p2)))) (semi i j))


          {-right-}
          ext-right : (i : I) -> ((x : ‚ü® ùìì ‚ü©) (i : I) -> ((Œ± i) Ôºù (inl x)) -> ùüò) -> (y : D+E) -> ((Œ± i) Ôºù y) -> ‚ü® ùìî ‚ü©
          ext-right i bad (inr y) p = y
          ext-right i bad (inl x) p = ùüò-elim (bad x i p)

          right : ((x : ‚ü® ùìì ‚ü©) (i : I) -> ((Œ± i) Ôºù (inl x)) -> ùüò) -> I -> ‚ü® ùìî ‚ü©
          right bad i = ext-right i bad (Œ± i) refl

          right-eq : (bad : (x : ‚ü® ùìì ‚ü©) (i : I) -> ((Œ± i) Ôºù (inl x)) -> ùüò) (i : I) -> (inr (right bad i) Ôºù (Œ± i))
          right-eq bad i = ext (Œ± i) refl
            where
              ext-right-eq : (x y : D+E) (p : x Ôºù y) (q : ((Œ± i) Ôºù x))-> (ext-right i bad x q) Ôºù (ext-right i bad y (q ‚àô p))
              ext-right-eq x x refl q = refl
   
              ext : (x : D+E) -> ((Œ± i) Ôºù x) -> ((inr (right bad i)) Ôºù x)
              ext (inr y) p = ap inr (ext-right-eq (Œ± i) (inr y) p refl)
              ext (inl x) p = ùüò-elim (bad x i p)


          right-neq : (i1 : I) -> (Œ£ x Íûâ ‚ü® ùìî ‚ü© , (Œ± i1) Ôºù (inr x)) -> (y : ‚ü® ùìì ‚ü©) (j1 : I) -> ((Œ± j1) Ôºù (inl y)) -> ùüò
          right-neq i1 p y j1 q = ‚à•‚à•-rec ùüò-is-prop (right-neq2 p q ) (semi i1 j1)
            where
              case1 : ((Œ± j1) Ôºù (inl y)) -> (k : I) -> (Œ± j1 ‚äë Œ± k) -> (Œ£ x Íûâ ‚ü® ùìî ‚ü© , (Œ± k) Ôºù (inr x)) -> ùüò
              case1 p k comp1 (x , q) = transport (_‚äë_ (inl y)) q (transport (Œª z ‚Üí  z ‚äë (Œ± k)) p comp1)

              case2 : (Œ£ x Íûâ ‚ü® ùìî ‚ü© , (Œ± i1) Ôºù (inr x)) -> (k : I) -> (Œ± i1 ‚äë Œ± k) -> (Œ£ y Íûâ ‚ü® ùìì ‚ü© , (Œ± k) Ôºù (inl y)) -> ùüò
              case2 (x , p) k comp1 (y , q) = transport (_‚äë_ (inr x)) q (transport (Œª z ‚Üí (z ‚äë Œ± k)) p comp1)

              right-neq2 : (Œ£ x Íûâ ‚ü® ùìî ‚ü© , (Œ± i1) Ôºù (inr x)) -> ((Œ± j1) Ôºù (inl y)) -> Œ£ k Íûâ I , (Œ± i1 ‚äë Œ± k) √ó (Œ± j1 ‚äë Œ± k) -> ùüò
              right-neq2 p q (k , (comp1 , comp2)) = cases (case2 p k comp1) (case1 q k comp2) (split k)

          rightcase : (i1 : I) -> (Œ£ x Íûâ ‚ü® ùìî ‚ü© , (Œ± i1) Ôºù (inr x)) -> (has-sup _‚äë_ Œ±)
          rightcase i1 p = (inr (‚àê ùìî d) , transport (Œª z ‚Üí is-sup _‚äë_ (inr (‚àê ùìî d)) z) eq (inr-is-continuous I b d))
            where
              b : I -> ‚ü® ùìî ‚ü©
              b = right (right-neq i1 p)

              eq2 : (inr ‚àò b) ‚àº Œ±
              eq2 = (right-eq (right-neq i1 p))
              
              eq : (inr ‚àò b) Ôºù Œ±
              eq = (dfunext fe) eq2
              
              d : is-Directed ùìî b
              d = (‚à£_‚à£ i1 , Œª i j ‚Üí ‚à•‚à•-functor (Œª (k , (p1 , p2)) ‚Üí k , (lower (transport (Œª z ‚Üí inr (b i) ‚äë z) ((eq2 k)‚Åª¬π) (transport (Œª z ‚Üí z ‚äë (Œ± k)) ((eq2 i)‚Åª¬π) p1)) , lower (transport (Œª z ‚Üí inr (b j) ‚äë z) ((eq2 k)‚Åª¬π) (transport (Œª z ‚Üí z ‚äë (Œ± k)) ((eq2 j)‚Åª¬π) p2)))) (semi i j))





N-dcpo : DCPO {ùì§‚ÇÄ} {ùì§‚ÇÄ}
N-dcpo = ‚Ñï , (_‚â§‚Ñï_ , ({!!} , ‚â§-is-prop-valued , ‚â§-refl , ‚â§-trans , ‚â§-anti) , {!!})


ùìõ-functor : {X Y : ùì§ Ãá} -> (X -> Y) -> (ùìõ X) -> (ùìõ Y)
ùìõ-functor f (P , œÜ , i) = P , f ‚àò œÜ , i

ùìõ-func-dcpo : {ùìì ùìî : DCPO {ùì§} {ùì£}} -> DCPO[ ùìì , ùìî ] -> DCPO[ (freely-add-‚ä•.ùìõ-DCPO ùìì) , (freely-add-‚ä•.ùìõ-DCPO ùìî) ]
ùìõ-func-dcpo (f , cf) = ùìõ-functor f , {!!}
  where
    mf2 : (ùìì ùìî : DCPO {ùì§} {ùì£}) -> ((g , cg) : DCPO[ ùìì , ùìî ]) -> is-monotone (freely-add-‚ä•.ùìõ-DCPO ùìì) (freely-add-‚ä•.ùìõ-DCPO ùìî) (ùìõ-functor g)
    mf2 ùìì ùìî (g , cg) = Œª (_ , œÜ , _) (_ , œà , _) (h , k) -> h , Œª p ‚Üí mf (œÜ p) (œà (h p)) (k p)
      where
        mf : is-monotone ùìì ùìî g
        mf = monotone-if-continuous ùìì ùìî (g , cg)


ùìì : ‚Ñï ‚Üí DCPO {ùì§‚ÇÅ} {ùì§‚ÇÅ}
ùìì zero = ùìõ-DCPO {ùì§‚ÇÄ} {ùüò{ùì§‚ÇÄ}} (props-are-sets ùüò-is-prop)
ùìì (succ n) = freely-add-‚ä•.ùìõ-DCPO (+-DCPO N-dcpo (ùìì n ‚üπ·µà·∂ú·µñ·µí freely-add-‚ä•.ùìõ-DCPO (ùìì n)))

ùìì-diagram : (n : ‚Ñï)
          ‚Üí DCPO[ ùìì n , ùìì (succ n) ]
          √ó DCPO[ ùìì (succ n) , ùìì n ]
ùìì-diagram zero = ((Œª x ‚Üí ùüò , ùüò-elim , ùüò-is-prop) , constant-functions-are-continuous (ùìì 0) (ùìì 1))
                 , ((Œª x ‚Üí ùüò , ùüò-elim , ùüò-is-prop) , constant-functions-are-continuous (ùìì 1) (ùìì 0))
ùìì-diagram (succ n) = (e , {!!}) , ({!!} , {!!})
  where
    en : DCPO[ ùìì n , ùìì (succ n) ]
    en = pr‚ÇÅ (ùìì-diagram n)
    pn : DCPO[ ùìì (succ n) , ùìì n ]
    pn = pr‚ÇÇ (ùìì-diagram n)
    e : ‚ü® ùìì (succ n) ‚ü© ‚Üí ‚ü® ùìì (succ (succ n)) ‚ü©
    e = ùìõ-functor (dep-cases (Œª x ‚Üí inl x)
                   (Œª f ‚Üí inr (DCPO-‚àò‚ÇÉ (ùìì (succ n)) (ùìì n) (freely-add-‚ä•.ùìõ-DCPO (ùìì n)) (freely-add-‚ä•.ùìõ-DCPO (ùìì (succ n))) pn f (ùìõ-func-dcpo en))))

{-DCPO-‚àò‚ÇÉ (ùìì (succ n)) (ùìì n) (ùìì n) (ùìì (succ n)) (pr‚ÇÇ (ùìì-diagram n)) f (pr‚ÇÅ (ùìì-diagram n))-}

{-(e , e-continuity) , (p , p-continuity)-}





          

\end{code}
